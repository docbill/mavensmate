{
    "instance_methods": [
        "abbreviate(Integer_maxWidth)", 
        "abbreviate(Integer_maxwidth, Integer_offset)", 
        "capitalize()", 
        "center(Integer_size)", 
        "center(Integer_size, String_padstr)", 
        "compareTo(String_compString)", 
        "contains(String_compString)", 
        "containsAny(String_compString)", 
        "containsIgnoreCase(String_compString)", 
        "containsNone(String_compString)", 
        "containsOnly(String_compString)", 
        "containsWhitespace()", 
        "countMatches(String_compString)", 
        "deleteWhitespace()", 
        "difference(String_compString)", 
        "endsWith(String_suffix)", 
        "endsWithIgnoreCase(String_suffix)", 
        "equals(String_compString)", 
        "equalsIgnoreCase(String_compString)", 
        "escapeCsv()", 
        "escapeEcmaScript()", 
        "escapeHtml3()", 
        "escapeHtml4()", 
        "escapeXml()", 
        "getLevenshteinDistance(String_s)", 
        "getLevenshteinDistance(String_s, Integer_threshold)", 
        "hashCode()", 
        "indexOf(String_subString)", 
        "indexOf(String_substring, Integer_i)", 
        "indexOfAny(String_substring)", 
        "indexOfAnyBut(String_substring)", 
        "indexOfDifference(String_s)", 
        "indexOfIgnoreCase(String_substring)", 
        "indexOfIgnoreCase(String_substring, Integer_startposition)", 
        "isAllLowerCase()", 
        "isAllUpperCase()", 
        "isAlpha()", 
        "isAlphaSpace()", 
        "isAlphanumeric()", 
        "isAlphanumericSpace()", 
        "isAsciiPrintable()", 
        "isNumeric()", 
        "isNumericSpace()", 
        "isWhitespace()", 
        "lastIndexOf(String_substring)", 
        "lastIndexOf(String_substring, Integer_endposition)", 
        "lastIndexOfIgnoreCase(String_substring)", 
        "lastIndexOfIgnoreCase(String_substring, Integer_endposition)", 
        "left(Integer_length)", 
        "leftPad(Integer_length)", 
        "length()", 
        "mid(Integer_startindex, Integer_length)", 
        "normalizeSpace()", 
        "remove(String_substring)", 
        "removeEnd(String_substring)", 
        "removeEndIgnoreCase(String_substring)", 
        "removeStart(String_substring)", 
        "removeStartIgnoreCase(String_substring)", 
        "repeat(Integer_numTimes)", 
        "repeat(String_separator, Integer_numtimes)", 
        "replace(String_target, String_replacement)", 
        "replaceAll(String_regexp, String_replacement)", 
        "replaceFirst(String_regexp, String_replacement)", 
        "reverse()", 
        "right(Integer_length)", 
        "rightPad(Integer_length)", 
        "split(String_regexp, Integer_limit)", 
        "splitByCharacterType()", 
        "splitByCharacterTypeCamelCase()", 
        "startsWith(String_prefix)", 
        "startsWith IgnoreCase(String_prefix)", 
        "stripHtmlTags(String_htmlInput)", 
        "substring(Integer_startIndex)", 
        "substring(Integer_startindex, Integer_endindex)", 
        "substringAfter(String_separator)", 
        "substringAfterLast(String_separator)", 
        "substringBefore(String_separator)", 
        "substringBeforeLast(String_separator)", 
        "substringBetween(String_tag)", 
        "substringBetween(String_open, String_close)", 
        "swapCase(String_open, String_close)", 
        "toLowerCase()", 
        "toLowerCase(String_locale)", 
        "toUpperCase()", 
        "toUpperCase(String_locale)", 
        "trim()", 
        "uncapitalize()", 
        "unescapeCsv()", 
        "unescapeEcmaScript()", 
        "unescapeHtml3()", 
        "unescapeHtml4()", 
        "unescapeXml()"
    ], 
    "static_methods": [
        "escapeSingleQuotes(String_s)", 
        "format(String_s, List_String__arguments)", 
        "fromCharArray(List_Integer__charArray)", 
        "getCommonPrefix(List_String__strings)", 
        "isBlank(String_s)", 
        "isEmpty(String_s)", 
        "isNotBlank(String_s)", 
        "isNotEmpty(String_s)", 
        "join(Object_iterableobj, String_separator)", 
        "valueOf(Date_d)", 
        "valueOf(Datetime_dt)", 
        "valueOf(Decimal_d)", 
        "valueOf(Double_d)", 
        "valueOf(Integer_I)", 
        "valueOf(Long_l)", 
        "valueOf(Object_x)", 
        "valueOfGmt(Datetime_dt)"
    ]
}